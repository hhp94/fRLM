ddirichlet( c(0.1,0.4, 0.5), c(1, 1, 1))
ddirichlet( c(0.2,0.4, 0.4), c(1, 1, 1))
ddirichlet( c(0.2,0.4, 0.4), c(1, 1, 0.5))
x <- rdirichlet(20, c(1, 1, 0.5))
ddirichlet( x, c(1, 1, 0.5))
par <- c(1, 1, 0.5)
function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( c(a,b,c), par )
}
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( c(a,b,c), par )
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
coloredTernaryPLot <- function(fun, prop2cover = 0.5){
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nColored <- round( (1-prop2cover)*8000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(FunctionToContour, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( c(a,b,c), par )
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
a <- b <- c <- 1/3
par <- c(1, 1, 0.5)
ddirichlet( c(a,b,c), par )
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( c(a,b,c), par )
}
fun <- dirfun
values <- TernaryPointValues(fun, resolution = 24L)
dirfun(a,b,c )
FunctionToContour(1,2,3 )
FunctionToContour(1:2,2,3 )
FunctionToContour(1:2,2:3,3 )
FunctionToContour(1:2,2:3,3:4 )
cbind(a,b,c)
ddirichlet( cbind(a,b,c), par )
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( cbind(a,b,c), par )
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( cbind(a,b,c), par )
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
fun <- dirfun
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nColored <- round( (1-prop2cover)*8000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(FunctionToContour, resolution = 36L)
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1) )
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(FunctionToContour, resolution = 36L)
coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(FunctionToContour, resolution = 36L)
values
ColourTernary(values, spectrum = coulorSpectrum )
ColourTernary
?ColourTernary
t(values)
dirfun
dirfun(values)
dirfun(values[1], values[2], values[3])
dirfun(values[,1], values[,2], values[,3])
dirfun(values[1,], values[2,], values[3,])
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( cbind(a,b,c), par ) * 10
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( cbind(a,b,c), par ) * 100
}
dev.off()
coloredTernaryPLot(dirfun, 0.7)
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.5)
ddirichlet( cbind(a,b,c), par ) * 10000
}
coloredTernaryPLot(dirfun, 0 )
coloredTernaryPLot(dirfun, 0.3 )
coloredTernaryPLot(dirfun, 0.1 )
dirfun <- function(a,b,c ){
par <- c(1, 1, 1)
ddirichlet( cbind(a,b,c), par ) * 10000
}
coloredTernaryPLot(dirfun, 0.1 )
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(1, 1, 1)
ddirichlet( cbind(a,b,c), par ) * 10000
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(1, 1, 1)
ddirichlet( cbind(a,b,c), par ) * 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(1, 1, 0.9)
ddirichlet( cbind(a,b,c), par ) * 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(1, 0.9, 0.7)
ddirichlet( cbind(a,b,c), par ) * 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(1, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 1000
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 1000 + 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par )
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) + 100
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) + 1000
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 100000
}
coloredTernaryPLot(dirfun, 0 )
coloredTernaryPLot <- function(fun, prop2cover = 0.5){
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nColored <- round( (1-prop2cover)*8000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1) )
coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 100000
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 10000
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par )
}
coloredTernaryPLot(dirfun, 0 )
coloredTernaryPLot(dirfun, 0 )
warnings()
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 10
}
coloredTernaryPLot(dirfun, 0 )
warnings()
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
ddirichlet( cbind(a,b,c), par ) * 10 + 1
}
coloredTernaryPLot(dirfun, 0 )
ddirichlet( cbind(a,b,c), par )
ddirichlet
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3]
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] + 1
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] + 10
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3]
}
coloredTernaryPLot(dirfun, 0 )
coloredTernaryPLot(dirfun, 0.3 )
coloredTernaryPLot(dirfun, 0.5 )
coloredTernaryPLot(dirfun, 1 )
coloredTernaryPLot(dirfun, 0.9 )
coloredTernaryPLot(dirfun, 0.99 )
coloredTernaryPLot(dirfun, 0.999 )
coloredTernaryPLot <- function(fun, prop2cover = 0.5){
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nColored <- round( (1-prop2cover)*8000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3]
}
coloredTernaryPLot(dirfun, 0.999 )
coloredTernaryPLot(dirfun, 0 )
coloredTernaryPLot <- function(fun, prop2cover = 0.5){
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nColored <- round( (1-prop2cover)*8000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3]
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] + 1
}
coloredTernaryPLot(dirfun, 0 )
dirfun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] * 10
}
coloredTernaryPLot(dirfun, 0 )
fun <- dirfun
coloredTernaryPLot(fun, 0 )
prop2cover = 0.5
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 8000 )
nTransp
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
nTransp
nColored
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
coloredTernaryPLot <- function(fun, prop2cover = 0.5){
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
fun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] * 10
}
coloredTernaryPLot(fun, 0 )
coloredTernaryPLot(fun, 0.2 )
coloredTernaryPLot(fun, 0.5 )
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
par <- c(0.7, 0.9, 0.4)
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
FunctionToContour <- function (a, b, c) {
a - c + (4 * a * b) + (27 * a * b * c)
}
coloredTernaryPLot(fun, 0.5 )
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = 1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
coloredTernaryPLot(fun, 0.5 )
coloredTernaryPLot( )
coloredTernaryPLot(par = c(0.1, 0.1, 0.9))
coloredTernaryPLot(par = c(0.1, 0.9, 0.9))
coloredTernaryPLot(par = c(0.1, 0.9, 0.4))
coloredTernaryPLot(par = c(0.1, 0.9, 0.1))
coloredTernaryPLot(par = c(0.1, 0.9, 0.2))
coloredTernaryPLot(par = c(0.1, 0.8, 0.2))
coloredTernaryPLot(par = c(0.2, 0.8, 0.3))
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0.6)
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0.6)
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
TernaryContour(fun, resolution = 72L)
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 72L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 144L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
TernaryContour(fun, resolution = 2000L)
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 2000L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 32L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 32L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
TernaryContour(fun, resolution = 36L)
coloredTernaryPLot <- function( par = c(0.7, 0.9, 0.4), prop2cover = 0.5){
fun <- function(a,b,c ){
a^par[1] * b^par[2] * c^par[3] * 10
}
values <- TernaryPointValues(fun, resolution = 24L)
TernaryPlot(alab = "W1", blab = "W2", clab = "W3")
nTransp <- round( prop2cover * 4000 )
nColored <- round( (1-prop2cover)*4000 )
coulorSpectrum <- c( rep( mycol, nTransp ), inferno(nColored, alpha = 1, begin = 0.5, end = 1, direction = -1) )
# coulorSpectrum <- inferno(nColored, alpha = 1, begin = 0, end = 1, direction = 1)
ColourTernary(values, spectrum = coulorSpectrum )
TernaryContour(fun, resolution = 36L)
}
coloredTernaryPLot(par = c(0.2, 0.8, 0.3), prop2cover = 0 )
values
t(values)
TernaryPointValues
?TernaryPointValues
values
t(values)
values[1, ]
values[,1 ]
# rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
devtools::document("./fRLM")
# To install it:
devtools::install("./fRLM")
browseVignettes()
browseVignettes(fRLM)
browseVignettes("fRLM")
setwd("./fRLM")
usethis::use_vignette("simulations")
# browseVignettes("fRLM")
devtools::build_rmd()
devtools::document("./fRLM")
# rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# devtools::create("./fRLM")
# after adding documetation
devtools::document("./fRLM")
# To install it:
devtools::install("./fRLM")
library(fRLM)
vignette(package = "fRLM")
# browseVignettes("fRLM")
devtools::build_rmd()
setwd("./fRLM")
devtools::build_rmd()
usethis::use_readme_rmd()
devtools::document("./fRLM")
