plot(a[[1]]$omega)
b <- predict(fitBayes)
points(b$omega, col=2)
# 1) Setup data:
head(toy) # toy example dataset
toy2 <- toy
toy2[, 4] <- round( ( toy[, 4] - 10 ) / 30, 2 ) # i. rescale age:
y <- toy2 %>% group_by(id) %>% summarise(outcome = mean(outcome) ) %>% pull(outcome) # extract outcome:
t_obs <- toy2 %>% group_by(id) %>% summarise(age = list(age)) %>%  pull(age) # extract age
exposure <- toy2 %>% group_by(id) %>% summarise(exposure = list(exposure)) %>%  pull(exposure) # extract exposure
# 2) Fit gaussian processes:
gpfitList <- lapply( 1:length(y), function(i) gpFit( t_obs[[i]], exposure[[i]] ) )
grid <- seq(0,1, l = 150 )
condMu <- t( sapply( gpfitList, predict, tnew = grid ) )
object$condMu
plot(object$condMu, condMu)
condMu
dim(object$condMu)
object$condMu[[1]]
dim(object$condMu[[1]])
plot(object$condMu[[1]], condMu)
dim(object$condMu)
dim(object$condum[[1]])
object$condMu[[1]]
dim(object$condMu[[1]]
)
dim(condMu)
min(toy2)
max(toy2)
min(toy2$age)
max(toy2$age)
devtools::load_all()
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
a <- output
a$condMu[[1]]
plot(a$condMu[[1]], condMu)
a$beta
a$beta[,1,]
plot(a$beta[,1,], fitBayes$beta)
plot(rowMeans(a$beta[,1,]), rowMeans(fitBayes$beta))
plot(colMeans(a$beta[,1,]), colMeans(fitBayes$beta))
abline(0,1,)
object$basis
plot(object$basis, fitBayes$basis)
a <- predict(object)
a
a[[1]]
plot(a[[1]]$omega)
output$basis
newdata = seq(0,1, l = 150)
L <- object$L
basis <- getBasis( L, grid = newdata )
plot(basis, output$basis)
object <- output
L <- object$L
i <- 1
basis <- object$basis
beta <- object$beta[,i,]
beta
object <- fitBayes
L <- object$L
basis <- getBasis( L, grid = newdata )
omega_all <- basis %*% t(object$beta)
om <- omega
object <- output
L <- object$L
basis <- object$basis
beta <- object$beta[,i,]
omega_all <- basis %*% t(beta)
omega <- rowMeans(omega_all)
om <- omega
object <- fitBayes
L <- object$L
basis <- getBasis( L, grid = newdata )
omega_all <- basis %*% t(object$beta)
omega <- rowMeans(omega_all)
omega
plot(omega)
om
points(om, col=2)
omega_ci <- apply( omega_all, 1, quantile, probs = c(0.025, 0.975) )
out_i <- list( omega = omega, omega_ci = omega_ci)
A <- predict(output)
A[[1]]$omega
grid <- object$grid_original_scale
grid
object <- output
grid <- object$grid_original_scale
grid
pred <- predict(object)
length(pred)
i <- 1
plot( pred[[i]]$omega ~ grid, lwd = 2, type = "l", col = "blue", ylim = ylim, ... )
devtools::load_all()
plot(output)
devtools::load_all()
plot(output)
devtools::load_all()
grid <- object$grid_original_scale
pred <- predict(object)
plot(output)
plot(fitBayes)
pred[[1]]
y_max <- max(lapply(pred, function(x) max(x)))
y_max <- max(unlist(lapply(pred, function(x) max(x))))
pred <- predict(object)
lapply(pred, function(x) max(x)))
y_max <- max(unlist(lapply(pred, function(x) max(unlist(x)))))
y_max
devtools::load_all()
plot(fit)
plot(output)
plot(fitBayes)
output$call
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
plot(output)
roxygen2::roxygenise()
library(fRLM)
data(toy)
toy
toy['exp'] <- rnorm(nrow(toy))
toy
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
toy$exp <- rnorm(length(toy$id))
toy
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
data(toy)
toy
toy$exp <- rnorm(length(toy$id))
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
setwd("~/GitHub/UNIZH/projects/race")
# Example usage of the fRLM function
library(fRLM)
data(toy)
toy
toy2 <- toy
toy2
toy2$exposure2 <- toy2$exposure + rnorm(length(toy2$exposure))
toy2
output <- fRLM(data=toy2,
id = "id",
time="age",
exposures=c("exposure", "exposure2"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
plot(output)
plot(output)
a <- predict(output)
a
a[[1]]
a[[2]]
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
plot(output)
output$exposures
output$w$exposure
xlab("ha")
plot(rnorm(10), xlab="ha")
library(fRLM)
library(fRLM)
colnames <- c(
"y",
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5",
"controls")
source("C:/Users/guill/Documents/GitHub/UNIZH/projects/frlm-bmi-alcool-smoking/pivoting.R", echo=TRUE)
cbind(colnames, colnames_rename)
data <- matrix(rnorm((length(colnames)+1)*10),nrow=10)
data
colnames(data) <- colnames
colnames(data) <- c(colnames, "controls")
data
# We first rename the columns
data %>% rename(colnames_rename = colnames)
source("C:/Users/guill/Documents/GitHub/UNIZH/projects/frlm-bmi-alcool-smoking/pivoting.R", echo=TRUE)
# We first rename the columns
data %>% rename(!!!setNames(syms(colnames), colnames_rename))
data <- as_tibble(data)
?rename
iris <- as_tibble(iris)
# Rename using a named vector and `all_of()`
lookup <- c(pl = "Petal.Length", sl = "Sepal.Length")
rename(iris, all_of(lookup))
lookup
lookup <- colnames
names(lookup) <- colnames_rename
lookup
# We first rename the columns
data %>% rename(all_of(lookup))
colnames <- c(
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
source("C:/Users/guill/Documents/GitHub/UNIZH/projects/frlm-bmi-alcool-smoking/pivoting.R", echo=TRUE)
library(tidyverse)
colnames <- c(
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
lookup <- colnames
names(lookup) <- colnames_rename
# Made-up data
data <- matrix(rnorm((length(colnames)+2)*10),nrow=10)
colnames(data) <- c("outcome", colnames, "controls")
data <- as_tibble(data)
# We first rename the columns
data %>% rename(all_of(lookup))
# do this on your dataset
data %>% rename(all_of(lookup))
?rename
?separate
dt <- dt %>% pivot_longer(all_of(colnames_rename))
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
dt <- dt %>% pivot_longer(all_of(colnames_rename))
dt
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", value_to="val")
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
dt
# Then we pivot wider by separating var  based on the delimiter _
dt %>% separate_wider_position(var, delim="_")
# Then we pivot wider by separating var  based on the delimiter _
dt %>% separate_wider_position(var, delim="_", width="var", "wave")
# Then we pivot wider by separating var  based on the delimiter _
dt %>% separate_wider_position(var, delim="_", names=c("var", "wave"))
# Then we pivot wider by separating var  based on the delimiter _
dt %>% separate_wider_delim(var, delim="_", names=c("var", "wave"))
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
# Since the rows correspond to respondents, we now  create the respondent id variable
dt <- dt %>% mutate(respondent_id=1:nrow(dt))
dt
# Then we pivot longer on the wave variables
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
dt
# We now pivot wider by separating var  based on the delimiter _
dt <- dt %>% separate_wider_delim(var, delim="_", names=c("var", "wave"))
dt
# we then pivot wider on the variables "var"
dt %>% pivot_wider(everything(), names_from="var", values_from="val")
?pivot_wider
# we then pivot wider on the variables "var"
dt %>% pivot_wider(names_from="var", values_from="val")
library(tidyverse)
colnames <- c(
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
lookup <- colnames
names(lookup) <- colnames_rename
# Made-up data
data <- matrix(rnorm((length(colnames)+2)*10),nrow=10)
colnames(data) <- c("outcome", colnames, "controls")
data <- as_tibble(data)
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
# Since the rows correspond to respondents, we now  create the respondent id variable
dt <- dt %>% mutate(respondent_id=1:nrow(dt))
# Then we pivot longer on the wave variables
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
dt
library(tidyverse)
colnames <- c(
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
lookup <- colnames
names(lookup) <- colnames_rename
# Made-up data
data <- matrix(rnorm((length(colnames)+2)*10),nrow=10)
colnames(data) <- c("outcome", colnames, "controls")
data <- as_tibble(data)
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
# Since the rows correspond to respondents, we now  create the respondent id variable
dt <- dt %>% mutate(respondent_id=1:nrow(dt))
# Then we pivot longer on the wave variables
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
# Now is a good time to remove waves without information
dt <- dt %>% filter(!is.na(val))
dt
# We now pivot wider by separating var  based on the delimiter _
dt <- dt %>% separate_wider_delim(var, delim="_", names=c("var", "wave"))
dt
# we then pivot wider on the variables "var"
dt %>% pivot_wider(names_from="var", values_from="val")
# we then pivot wider on the variables "var"
dt <- dt %>% pivot_wider(names_from="var", values_from="val")
dt
source("C:/Users/guill/Documents/GitHub/UNIZH/projects/frlm-bmi-alcool-smoking/pivoting.R", echo=TRUE)
dt
