"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
lookup <- colnames
names(lookup) <- colnames_rename
# Made-up data
data <- matrix(rnorm((length(colnames)+2)*10),nrow=10)
colnames(data) <- c("outcome", colnames, "controls")
data <- as_tibble(data)
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
# Since the rows correspond to respondents, we now  create the respondent id variable
dt <- dt %>% mutate(respondent_id=1:nrow(dt))
# Then we pivot longer on the wave variables
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
dt
library(tidyverse)
colnames <- c(
"w1bmi",
"w2bmi",
"w3bmi",
"w4bmi",
"w5bmi",
"age_t1",
"age_t2",
"age_t3",
"age_t4",
"age_t5",
"smoke_w1_calc",
"smoke_w2_calc",
"smoke_w3_calc",
"smoke_w4_calc",
"smoke_w5_calc",
"alcohol_use_w1",
"alcohol_use_w2",
"alcohol_use_w3",
"alcohol_use_w4",
"alcohol_use_w5")
colnames_rename <- c(
"bmi_1",
"bmi_2",
"bmi_3",
"bmi_4",
"bmi_5",
"age_1",
"age_2",
"age_3",
"age_4",
"age_5",
"smoke_1",
"smoke_2",
"smoke_3",
"smoke_4",
"smoke_5",
"alcohol_1",
"alcohol_2",
"alcohol_3",
"alcohol_4",
"alcohol_5")
lookup <- colnames
names(lookup) <- colnames_rename
# Made-up data
data <- matrix(rnorm((length(colnames)+2)*10),nrow=10)
colnames(data) <- c("outcome", colnames, "controls")
data <- as_tibble(data)
# do this on your dataset
# First we rename the wave variables so they have consistent naming
dt <- data %>% rename(all_of(lookup))
# Since the rows correspond to respondents, we now  create the respondent id variable
dt <- dt %>% mutate(respondent_id=1:nrow(dt))
# Then we pivot longer on the wave variables
dt <- dt %>% pivot_longer(all_of(colnames_rename), names_to="var", values_to="val")
# Now is a good time to remove waves without information
dt <- dt %>% filter(!is.na(val))
dt
# We now pivot wider by separating var  based on the delimiter _
dt <- dt %>% separate_wider_delim(var, delim="_", names=c("var", "wave"))
dt
# we then pivot wider on the variables "var"
dt %>% pivot_wider(names_from="var", values_from="val")
# we then pivot wider on the variables "var"
dt <- dt %>% pivot_wider(names_from="var", values_from="val")
dt
source("C:/Users/guill/Documents/GitHub/UNIZH/projects/frlm-bmi-alcool-smoking/pivoting.R", echo=TRUE)
dt
devtools::load_all()
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
library(tidyverse)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
data_stan
data_stan$n
data_stan$L
data_stan$p
data_stan$
d
data_stan$y
data_stan$eta
eta[[0]]
data_stan
data_stan$eta[[0]]
dim(data_stan$eta)
data_stan$C
data_stan$alpha_par
data_stan$beta_par
data_stan$T
data_stan$S
data_stan$Sigma
grouping
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
data_stan$Sigma
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
xi
rho
mean(rho)
# Extract random effects
random_effects <- extract(fit, pars = "xi")$xi
# Calculate 95% CI for each level of random effects
lower_ci <- apply(random_effects, 2, quantile, probs = 0.025)  # 2.5% quantile for each column
upper_ci <- apply(random_effects, 2, quantile, probs = 0.975)  # 97.5% quantile for each column
# The results
ci_data <- data.frame(
Mean = colMeans(random_effects),
Lower_95CI = lower_ci,
Upper_95CI = upper_ci
)
print(ci_data)
# Set parameters for data generation
n <- 100
L <- 5
p <- 3
d <- 2
alpha_par <- 5
beta_par <- 1
T <- 4
S <- 3
n <- 100
L <- 5
p <- 3
d <- 2
alpha_par <- 5
beta_par <- 1
T <- 4
S <- 3
# Set some "true" values for the parameters
true_delta <- rnorm(p, 0, 10)
true_alpha <- rnorm(d, 0, alpha_par)
true_beta <- list()
for (k in 1:p) {
true_beta[[k]] <- rdirichlet(1, rep(beta_par / L, L))[1,]
}
install.packages("MCMCpack")
library(MCMCpack)
install.packages("MCMCpack")
install.packages("MCMCpack")
install.packages("MCMCpack")
library("MCMCpack")
install.packages("Matrix")
install.packages("Matrix")
# Example usage of the fRLM function
# library(fRLM)
devtools::load_all()
# Set parameters for data generation
n <- 100
L <- 5
p <- 3
d <- 2
alpha_par <- 5
library(fRLM)
beta_par <- 1
T <- 4
S <- 3
# Set some "true" values for the parameters
true_delta <- rnorm(p, 0, 10)
true_alpha <- rnorm(d, 0, alpha_par)
true_beta <- list()
for (k in 1:p) {
true_beta[[k]] <- rdirichlet(1, rep(beta_par / L, L))[1,]
}
# Set parameters for data generation
library(MCMCpack)
n <- 100
L <- 5
p <- 3
d <- 2
alpha_par <- 5
beta_par <- 1
T <- 4
S <- 3
# Set some "true" values for the parameters
true_delta <- rnorm(p, 0, 10)
true_alpha <- rnorm(d, 0, alpha_par)
true_beta <- list()
for (k in 1:p) {
true_beta[[k]] <- rdirichlet(1, rep(beta_par / L, L))[1,]
}
true_sigma <- rlnorm(1, 0, 1)
true_xi <- rnorm(S)
true_rho <- runif(1, 0, 1)
# Generate synthetic data
eta <- array(rnorm(n * L * p), dim = c(n, L, p))
C <- matrix(rnorm(n * d), n, d)
Sigma <- matrix(sample(1:S, n * T, replace = TRUE), ncol = T)
mu = matrix(0, n, 1)
for (k in 1:p) {
mu = mu + true_delta[k] * matrix(eta[,,k] %*% true_beta[[k]], n, 1)
}
mu = mu + C %*% true_alpha
random_effects = rep(0, n)
for (i in 1:n) {
for (t in 1:T) {
random_effects[i] = random_effects[i] + true_rho^(T-t) * true_xi[Sigma[i,t]]
}
}
y = rnorm(n, mu + random_effects, true_sigma)
y
eta
C
Sigma
tibble(outcome=y)
library(tidyverse)
tibble(outcome=y)
C
# Your synthetic data are now in y, eta, C, and Sigma
# make everytihng
cbind(y, C)
outcome
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1, time_2 = 1+(runif(n()) < 0.5)*1)
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
grouping <- id
toy
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1) #, time_2 = 1+(runif(n()) < 0.5)*1)
id
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
id
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1) #, time_2 = 1+(runif(n()) < 0.5)*1)
id
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1) #, time_2 = 1+(runif(n()) < 0.5)*1)
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
id
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1 , time_2 = 1+(runif(n()) < 0.5)*1)
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
id
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1) # , time_2 = 1+(runif(n()) < 0.5)*1)
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
grouping <- id
id
# modify the outcome with random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.4, +0.4))
add_to_outcome
# modify the outcome with random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.4, +0.4)) %>% dplyr::select(id, to_add)
toy %>% left_join(add_to_outcome)
toy %>% left_join(add_to_outcome) %>% mutate(outcome = outcome + to_add) %>% select(-to_add)
# Example usage of the fRLM function
library(fRLM)
data(toy)
id <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
id <- id %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1) # , time_2 = 1+(runif(n()) < 0.5)*1)
id <- id %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
grouping <- id
# modify the outcome with random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.4, +0.4)) %>% dplyr::select(id, to_add)
toy <- toy %>% left_join(add_to_outcome) %>% mutate(outcome = outcome + to_add) %>% select(-to_add)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$xi
colMeans(output$xi)
diff(colMeans(output$xi))
output$beta
toy
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output
output$xi
colMeans(output$xi)
colMeans(output$alpha)
output$sigma
mean(output$sigma)
output$basis
output$rho
mean(output$rho)
output$alpha
coLmeans(output$alpha)
colMeans(output$alpha)
colMeans(output$phi)
colMeans(output$xi)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$xi
colMeans(output$xi)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
library(fRLM)
output$xi
colMeans(output$xi)
colMeans(output$alpha)
plot(output)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
library(fRLM)
colMeans(output$xi)
# Example usage of the fRLM function
library(fRLM)
data(toy)
mean(output$xi)
grouping
grouping
grouping
# Add a grouping
grouping <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1)
grouping <- grouping %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
grouping
?fRLM
data(toy)
# Add a grouping
grouping <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1)
grouping <- grouping %>% pivot_longer(starts_with("time"), names_to="time", values_to = "group")
# modify the outcome with random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.5, +0.5)) %>% dplyr::select(id, to_add)
grouping
# Add a grouping
grouping <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1)
grouping
# Add a grouping
grouping <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(time_1 = 1 + (runif(n()) <0.5)*1)
grouping
# Add a grouping
grouping <- unique(toy$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(group = 1 + (runif(n()) <0.5)*1)
# modify the outcome with random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.5, +0.5)) %>% dplyr::select(id, to_add)
add_to_outcome
toy <- toy %>% left_join(add_to_outcome) %>% mutate(outcome = outcome + to_add) %>% select(-to_add)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
grouping
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
groups
grouping
# Create the grouping matrix and data relevant to groupings
groups_matrix <- y_with_id %>% dplyr::select(!!sym(id)) %>% left_join(grouping) %>% select(-!!sym(id)) %>% as.matrix()
groups_matrix
source("~/GitHub/frlm/R/fRLM_additive.R", echo=TRUE)
# Example usage of the fRLM function
library(fRLM)
library(dplyr)
library(tidyverse)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
plot(output)
colMeans(output$xi)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$xi
colMeans(output$xi)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$xi
output$xi %>% hist
unlink(tempdir(), recursive = TRUE)
install.packages("missMDA")
grouping
output
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$phi
output$delta
colMeans(output$delta)
toy
is.tibble(toy)
# Add an unrelated exposure
toy$exposure_2 <- rnorm(nrow(toy))
toy
# Add an unrelated exposure
toy$exposure_2 <- round(rnorm(nrow(toy)),2)
toy
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$delta
colMeans(output$delta)
plot(output)
apply(output$delta, 2, function(x) quantile(x, c(.05, .95)))
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
output$exposures
devtools::load_all()
plot(output)
source("~/GitHub/frlm/development/random effect/fRLM_random_effect.R", echo=TRUE)
a <- predict(output)
a$exposure
a$omega
plot(a$exposure$omega)
plot(a$exposure2$omega)
devtools::load_all()
a <- predict(output)
devtools::load_all()
a <- predict(output)
a
a$exposure$``
devtools::load_all()
a <- predict(output)
a$exposure$omega_median
plot(a$exposure$omega_median)
devtools::load_all()
a <- predict(output)
plot(a$exposure$omega_median)
plot(a$exposure2$omega_median)
plot(a)
plot(output)
plot(a$exposure2$omega)
samples <- outcome$
fit
samples <- extract(output$fit, permuted=TRUE)
samples
samples$delta
apply(samples$delta, 2, function(x) quantile(x, c(0.025, 0.975))
)
samples <- stan::extract(output$fit, permuted = TRUE)
samples <- Rstan::extract(output$fit, permuted = TRUE)
samples <- rstan::extract(output$fit, permuted = TRUE)
CI <- list()
CI <- list()
samples <- rstan::extract(output$fit, permuted = TRUE)
CI <- list()
for (parameter in names(samples)) {
CI[[parameter]] = apply(samples[[parameter]], 2, function(x) quantile(x, c(0.025, 0.975)))
}
samples
lapply(samples, function(x) dim(x))
output$delta
apply(output$delta, 2, function(x) quantile(x, c(0.025, 0.975)))
roxygen2::roxygenize()
devtools::load_all()
library(fRLM)
library(fRLM)
?fRLM
set.seed(1234)
toy2 <- toy
# Add an unrelated exposure
toy2$exposure2 <- round(rnorm(nrow(toy)),2)
# Add a grouping
grouping <- unique(toy2$id) %>% as_tibble() %>% rename(id=value)
grouping <- grouping %>% mutate(group = 1 + (runif(n()) <0.5)*1)
# Modify the outcome to add random effects
add_to_outcome <- grouping %>% mutate(to_add=ifelse(group==1, -0.5, +0.5)) %>% dplyr::select(id, to_add)
toy2 <- toy2 %>% left_join(add_to_outcome) %>% mutate(outcome = outcome + to_add) %>% select(-to_add)
output <- fRLM(data=toy2,
id = "id",
time="age",
exposures=c("exposure", "exposure2"),
grouping = grouping,
outcome="outcome",
warmup = 1000, iter = 2000, chains = 2) # this is passed to stan
samples <- rstan::extract(output$fit, permuted = TRUE)
# Create confidence intervals for delta (effect size of exposures)
apply(output$delta, 2, function(x) quantile(x, c(0.025, 0.975)))
plot(output)
roxygen2::roxygenize
roxygen2::roxygenize()
library(fRLM)
