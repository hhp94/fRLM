exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
library(fRLM)
?fRLM
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
magrittr::%>%
magrittr::<-%>%
?magrittr
library(fRLM)
library(fRLM)
%>%
library(dplyr)
%>%
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
roxygen2::roxygenise()
library(fRLM)
?fRLM::fRLM
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
roxygen2::roxygenise()
roxygen2::roxygenise()
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
roxygen2::roxygenise()
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
roxygen2::roxygenise()
library(fRLM)
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
roxygen::roxygenise()
roxygen2::roxygenise()
library(fRLM)
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
library(fRLM)
roxygen2::roxygenise()
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
output
output$beta
dim(output$beta)
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
output$grid_original_scale
#' @export
predict.additive_fRLM <- function( object, newdata = seq(0,1, l = 150), returnALL = FALSE ){
L <- object$L
basis <- getBasis( L, grid = newdata )
omega_all <- basis %*% t(object$beta)
omega <- rowMeans(omega_all)
omega_ci <- apply( omega_all, 1, quantile, probs = c(0.025, 0.975) )
out <- list( omega = omega, omega_ci = omega_ci, newdata = newdata )
if(returnALL){
out$omega_all <- omega_all
}
return( out )
}
object <- output
object
L <- object$L
object$basis
object$beta
dim(object$beta
)
dim(basis)
basis
dim(object$basis)
object$dim
dim <- list(p=5)
dim
fRLM <- function(data, id, time, exposures, outcome, controls=NULL, L=5, alpha_par=1, beta_par=1, ...) {
# Create the time scaler. This function scales the data down and back to the original scale
timeScaler <- timeScaler_ff(data %>% pull(!!sym(time)), min=0, max=1)
# Standardize time
data <- data %>% mutate(!!time := timeScaler(data[[time]]))
# Define the grid
grid <- seq(0,1, l = 150 )
grid_original_scale <- timeScaler(grid, original_scale = TRUE)
# Fit the gaussian processes for each exposure
condMu <- list()
for (exposure in exposures) {
# extract outcome for each exposure
subdata <- data %>% filter(!is.na({{exposure}}))
t_obs <- subdata %>% group_by(!!sym(id)) %>% summarise(t_obs = list(!!sym(time))) %>% pull(t_obs)
expo  <- subdata %>% group_by(!!sym(id)) %>% summarise(expo = list(!!sym(exposure))) %>% pull(expo)
gpfitList <- lapply( 1:length(t_obs), function(i) gpFit( t_obs[[i]], expo[[i]] ) )
condMu[[exposure]] <- t( sapply( gpfitList, predict, tnew = grid ) )
}
# Extract quantities
# ------------------
# Extract y
y <- data %>% group_by(!!sym(id)) %>% summarise(outcome = mean(!!sym(outcome))) %>% pull(outcome)
# Declare the dimensions
dim <- list(
"n" = length(y),
"L" = L,
"p" = length(exposures),
"d" = length(controls) + 1
)
# Compile the array of exposures
basis <- getBasis( L, grid )
eta_list <- lapply(condMu, function(X) X %*% basis / ncol(X))
# get them in a p x n x L array
eta <- abind::abind(eta_list, along=0)
# Compile the controls
C <- data %>% group_by(!!sym(id)) %>% summarise(across(all_of(controls), ~mean(.))) %>% ungroup() %>%
# select the controls
select(all_of(controls)) %>%
# add intercept
mutate(intercept=1, .before=1) %>% as.matrix
# Stan: Bayesian regression
# -------------------------
data_stan <- c(dim, list(
y = y,
eta = eta,
C = C,
alpha_par = alpha_par,
beta_par = beta_par
))
fileName <- "fRLM_additive.stan"
stanFile <- system.file("stan", fileName, package = "fRLM")
fit <- rstan::stan( file = stanFile, data = data_stan, ...)
# output:
alpha <- rstan::extract(fit, 'alpha')[[1]]
beta  <- rstan::extract(fit, 'beta')[[1]]
delta <- rstan::extract(fit, 'delta')[[1]]
sigma <- rstan::extract(fit, 'sigma')[[1]]
out <- list( fit = fit, condMu = condMu, delta = delta, alpha = alpha, beta = beta, sigma = sigma, grid=grid, grid_original_scale=grid_original_scale, basis = basis, L = L, data=data, timeScaler=timeScaler, dim=dim)
class(out) <- "additive_fRLM"
return(out)
}
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
library(dplyr)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
output$dim
object$beta
dim(object(beta))
dim(object$beta)
roxygen2::roxygenise()
library(fRLM)
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
plot(output)
a <- predict(output)
a
a[[1]]
a[[2]]
plot(a[[omega]])
plot(a[[1]]$omega)
a <- output
a$beta
dim(a$beta)
a$beta[,1,]
rowSums(a$beta[,1,])
object <- output
out <- list()
i <- 1
L <- object$L
basis <- object$basis
beta <- object$beta[,i,]
basis
colMeans(basis)
plot(basis)
basis
ts.plot(basis)
library(fRLM)
library(dplyr)
# 1) Setup data:
head(toy) # toy example dataset
toy2 <- toy
toy2[, 4] <- round( ( toy[, 4] - 10 ) / 30, 2 ) # i. rescale age:
y <- toy2 %>% group_by(id) %>% summarise(outcome = mean(outcome) ) %>% pull(outcome) # extract outcome:
t_obs <- toy2 %>% group_by(id) %>% summarise(age = list(age)) %>%  pull(age) # extract age
exposure <- toy2 %>% group_by(id) %>% summarise(exposure = list(exposure)) %>%  pull(exposure) # extract exposure
# 2) Fit gaussian processes:
gpfitList <- lapply( 1:length(y), function(i) gpFit( t_obs[[i]], exposure[[i]] ) )
grid <- seq(0,1, l = 150 )
condMu <- t( sapply( gpfitList, predict, tnew = grid ) )
# 3) Bayesian Estimation:
fitBayes <- funcReg_bayes( y, condMu, warmup = 500, iter = 1000, chains = 2 )
plot(fitBayes)
toy2$age
devtools::load_all()
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
a <- predict(output)
a <- predict(object)
devtools::load_all
devtools::load_all()
a <- predict(object)
a
a[[1]]$omega
plot(a[[1]]$omega)
b <- predict(fitBayes)
points(b$omega, col=2)
# 1) Setup data:
head(toy) # toy example dataset
toy2 <- toy
toy2[, 4] <- round( ( toy[, 4] - 10 ) / 30, 2 ) # i. rescale age:
y <- toy2 %>% group_by(id) %>% summarise(outcome = mean(outcome) ) %>% pull(outcome) # extract outcome:
t_obs <- toy2 %>% group_by(id) %>% summarise(age = list(age)) %>%  pull(age) # extract age
exposure <- toy2 %>% group_by(id) %>% summarise(exposure = list(exposure)) %>%  pull(exposure) # extract exposure
# 2) Fit gaussian processes:
gpfitList <- lapply( 1:length(y), function(i) gpFit( t_obs[[i]], exposure[[i]] ) )
grid <- seq(0,1, l = 150 )
condMu <- t( sapply( gpfitList, predict, tnew = grid ) )
object$condMu
plot(object$condMu, condMu)
condMu
dim(object$condMu)
object$condMu[[1]]
dim(object$condMu[[1]])
plot(object$condMu[[1]], condMu)
dim(object$condMu)
dim(object$condum[[1]])
object$condMu[[1]]
dim(object$condMu[[1]]
)
dim(condMu)
min(toy2)
max(toy2)
min(toy2$age)
max(toy2$age)
devtools::load_all()
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
a <- output
a$condMu[[1]]
plot(a$condMu[[1]], condMu)
a$beta
a$beta[,1,]
plot(a$beta[,1,], fitBayes$beta)
plot(rowMeans(a$beta[,1,]), rowMeans(fitBayes$beta))
plot(colMeans(a$beta[,1,]), colMeans(fitBayes$beta))
abline(0,1,)
object$basis
plot(object$basis, fitBayes$basis)
a <- predict(object)
a
a[[1]]
plot(a[[1]]$omega)
output$basis
newdata = seq(0,1, l = 150)
L <- object$L
basis <- getBasis( L, grid = newdata )
plot(basis, output$basis)
object <- output
L <- object$L
i <- 1
basis <- object$basis
beta <- object$beta[,i,]
beta
object <- fitBayes
L <- object$L
basis <- getBasis( L, grid = newdata )
omega_all <- basis %*% t(object$beta)
om <- omega
object <- output
L <- object$L
basis <- object$basis
beta <- object$beta[,i,]
omega_all <- basis %*% t(beta)
omega <- rowMeans(omega_all)
om <- omega
object <- fitBayes
L <- object$L
basis <- getBasis( L, grid = newdata )
omega_all <- basis %*% t(object$beta)
omega <- rowMeans(omega_all)
omega
plot(omega)
om
points(om, col=2)
omega_ci <- apply( omega_all, 1, quantile, probs = c(0.025, 0.975) )
out_i <- list( omega = omega, omega_ci = omega_ci)
A <- predict(output)
A[[1]]$omega
grid <- object$grid_original_scale
grid
object <- output
grid <- object$grid_original_scale
grid
pred <- predict(object)
length(pred)
i <- 1
plot( pred[[i]]$omega ~ grid, lwd = 2, type = "l", col = "blue", ylim = ylim, ... )
devtools::load_all()
plot(output)
devtools::load_all()
plot(output)
devtools::load_all()
grid <- object$grid_original_scale
pred <- predict(object)
plot(output)
plot(fitBayes)
pred[[1]]
y_max <- max(lapply(pred, function(x) max(x)))
y_max <- max(unlist(lapply(pred, function(x) max(x))))
pred <- predict(object)
lapply(pred, function(x) max(x)))
y_max <- max(unlist(lapply(pred, function(x) max(unlist(x)))))
y_max
devtools::load_all()
plot(fit)
plot(output)
plot(fitBayes)
output$call
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures="exposure",
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
plot(output)
roxygen2::roxygenise()
library(fRLM)
data(toy)
toy
toy['exp'] <- rnorm(nrow(toy))
toy
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
toy$exp <- rnorm(length(toy$id))
toy
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
data(toy)
toy
toy$exp <- rnorm(length(toy$id))
# Example usage of the fRLM function
library(fRLM)
data(toy)
output <- fRLM(data=toy,
id = "id",
time="age",
exposures= c("exposure", "exp"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
setwd("~/GitHub/UNIZH/projects/race")
# Example usage of the fRLM function
library(fRLM)
data(toy)
toy
toy2 <- toy
toy2
toy2$exposure2 <- toy2$exposure + rnorm(length(toy2$exposure))
toy2
output <- fRLM(data=toy2,
id = "id",
time="age",
exposures=c("exposure", "exposure2"),
outcome="outcome",
warmup = 500, iter = 1000, chains = 2) # this is passed to stan
plot(output)
plot(output)
a <- predict(output)
a
a[[1]]
a[[2]]
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
library(fRLM)
source("~/.active-rstudio-document", echo=TRUE)
plot(output)
output$exposures
output$w$exposure
xlab("ha")
plot(rnorm(10), xlab="ha")
